// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            BigInt      @id @default(autoincrement())
  tgId          BigInt      @unique
  tgUsername    String?
  firstName     String?
  lastName      String?
  profileImg    String?
  isPremium     Boolean     @default(false)
  refCode       String      @unique
  referBy       BigInt?
  langCode      String?
  // default custody wallet saved in User
  walletMode    WalletMode?
  walletChain   Blockchain?
  walletNetwork Network?
  walletAddress String?
  walletBalance BigInt?
  totalPoints   BigInt      @default(0)
  extJson       Json?
  traceId       String?
  createBy      BigInt?
  createDt      DateTime    @default(now())
  modifyBy      BigInt?
  modifyDt      DateTime    @updatedAt
}

model UserAction {
  id                BigInt   @id @default(autoincrement())
  opTgId            BigInt
  opDisplayName     String?
  actionType        String
  selfReward        BigInt?
  targetTgId        BigInt?
  targetReward      BigInt?
  targetDisplayName String?
  extJson           Json?
  traceId           String?
  createBy          BigInt?
  createDt          DateTime @default(now())
  modifyBy          BigInt?
  modifyDt          DateTime @unique @updatedAt

  @@index([opTgId])
}

model Wallet {
  id       BigInt     @id @default(autoincrement())
  // Custody, Self-custodial
  type     String
  // TON-Mainnet, ETH-Testnet
  chain    Blockchain
  network  Network
  address  String     @unique
  balance  BigInt?
  pk       String?
  phrases  String?
  extJson  Json?
  traceId  String?
  createBy BigInt?
  createDt DateTime   @default(now())
  modifyBy BigInt?
  modifyDt DateTime   @updatedAt

  @@index([address])
}

// for custody wallet only
model WalletOrder {
  id        BigInt   @id @default(autoincrement())
  // Topup, Withdraw
  orderType String
  walletId  BigInt
  opAmount  BigInt?
  opTgId    BigInt?
  txHash    String?
  extJson   Json?
  traceId   String?
  createBy  BigInt?
  createDt  DateTime @default(now())
  modifyBy  BigInt?
  modifyDt  DateTime @updatedAt

  @@index([walletId])
}

model Group {
  id              BigInt     @id @default(autoincrement())
  groupId         BigInt     @unique
  inviterTgId     BigInt
  // group | supergroup
  groupType       String
  // group display name called title
  groupTitle      String
  // public link name suffix, e.g. https://t.me/groupUsername
  groupUsername   String?
  langCode        String?
  memberCount     BigInt?
  // the first bot which invited into group, and can add more bots in future
  mainBotId       BigInt
  mainBotUsername String
  // status: "member" | "creator" | "administrator" | "restricted" | "left" | "kicked"
  botStatus       ChatStatus
  // main is one-one relation, and we can add a many to many called memecoins
  mainMemecoin    Memecoin?  @relation(fields: [mainMemecoinId], references: [id])
  mainMemecoinId  BigInt?    @unique
  extJson         Json?
  traceId         String?
  createBy        BigInt?
  createDt        DateTime   @default(now())
  modifyBy        BigInt?
  modifyDt        DateTime   @updatedAt

  @@index([inviterTgId])
}

model Memecoin {
  id               BigInt     @id @default(autoincrement())
  chain            Blockchain
  network          Network
  name             String
  ticker           String
  description      String
  imageType        String?
  image            String?
  devTgId          BigInt?
  coinStatus       CoinStatus
  contractVersion  String?
  deployTxHash     String?
  masterAddress    String?
  devWalletAddress String?
  opWalletAddress  String?
  opDeploySeqNo    BigInt?
  socialJson       Json?
  dexJson          Json?
  groupId          BigInt?
  Group            Group?
  extJson          Json?
  traceId          String?
  createBy         BigInt?
  createDt         DateTime   @default(now())
  modifyBy         BigInt?
  modifyDt         DateTime   @updatedAt

  @@index([ticker])
  @@index([devTgId, ticker])
  @@index([createDt])
  @@index([modifyDt])
}

model BuyOrder {
  id         BigInt   @id @default(autoincrement())
  buyerTgId  BigInt
  memecoinId BigInt
  name       String
  ticker     String
  status     String
  buyAmt     BigInt?
  fromCoin   String?
  fromAmt    BigInt?
  txHash     String?
  extJson    Json?
  traceId    String?
  createBy   BigInt?
  createDt   DateTime @default(now())
  modifyBy   BigInt?
  modifyDt   DateTime @updatedAt

  @@index([memecoinId])
}

model SellOrder {
  id          BigInt   @id @default(autoincrement())
  sellerTgId  BigInt
  memecoinId  BigInt
  name        String
  ticker      String
  status      String
  sellMode    String?
  sellPercent BigInt?
  sellAmt     BigInt?
  toCoin      String?
  toAmt       BigInt?
  txHash      String?
  extJson     Json?
  traceId     String?
  createBy    BigInt?
  createDt    DateTime @default(now())
  modifyBy    BigInt?
  modifyDt    DateTime @updatedAt

  @@index([memecoinId])
}

//  ================== enums ==================

enum WalletMode {
  PlatformCustody
  UserOwnWallet
}

enum Blockchain {
  TON
  SOL
  ETH
}

enum Network {
  Mainnet
  Testnet
  Custom
}

enum ChatStatus {
  creator
  member
  administrator
  restricted
  left
  kicked
}

enum CoinStatus {
  Init
  Processing
  Deploying
  Deployed
  FailedToDeploy
  DexListing
  FailedToListing
  DexListed
}

//  ================== enums end ==================
